<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreatePermissionTables extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        $tableNames = config('permission.table_names');
        $defaultState = 1;

        Schema::create($tableNames['permissions'], function (Blueprint $table) use ($defaultState){
            $table->increments('id');
            $table->string('name');
            $table->json('label')->nullable();
            $table->string('guard_name');
            $table->integer('state')->default($defaultState)->comment('0 = disabled, 1 = enabled');
            $table->timestamps();

            $table->unique(['name', 'guard_name']);
        });

        Schema::create($tableNames['roles'], function (Blueprint $table) use ($defaultState) {
            $table->increments('id');
            $table->string('name');
            $table->json('label')->nullable();
            $table->string('guard_name');
            $table->integer('state')->default($defaultState)->comment('0 = disabled, 1 = enabled');
            $table->timestamps();

            $table->unique(['name', 'guard_name']);
        });

        if(!Schema::hasTable($tableNames['containers'])){
            Schema::create($tableNames['containers'], function (Blueprint $table) use ($defaultState) {
                $table->increments('id');
                $table->string('name');
                $table->json('label')->nullable();
                $table->string('guard_name');
                $table->integer('state')->default($defaultState)->comment('0 = disabled, 1 = enabled');
                $table->timestamps();
            });
        }

        Schema::create($tableNames['sections'], function (Blueprint $table) use ($defaultState, $tableNames){
            $table->increments('id');
            $table->string('name');
            $table->json('label')->nullable();
            $table->integer('section_id')->unsigned()->nullable();
            $table->string('guard_name');
            $table->integer('state')->default($defaultState)->comment('0 = disabled, 1 = enabled');
            $table->timestamps();

            $table->foreign('section_id')
                            ->references('id')
                            ->on($tableNames['sections'])
                            ->onDelete('cascade')
                            ->onUpdate('cascade');

            $table->unique(['name', 'guard_name']);
        });

        Schema::create($tableNames['model_has_permissions'], function (Blueprint $table) use ($tableNames) {
            $table->integer('id')->autoIncrement()->unique()->unsigned();
            $table->integer('permission_id')->unsigned();
            $table->integer('section_id')->unsigned();
            $table->integer('container_id')->unsigned();
            $table->morphs('model');

            $table->foreign('permission_id')
                ->references('id')
                ->on($tableNames['permissions'])
                ->onDelete('cascade')
                ->onUpdate('cascade');

            $table->foreign('section_id')
                ->references('id')
                ->on($tableNames['sections'])
                ->onDelete('cascade')
                ->onUpdate('cascade');

            $table->foreign('container_id')
                ->references('id')
                ->on($tableNames['containers'])
                ->onDelete('cascade')
                ->onUpdate('cascade');

            $table->unique(['permission_id', 'section_id', 'container_id','model_id', 'model_type'], $tableNames['model_has_permissions'].'_unique_key');
        });

        Schema::create($tableNames['model_has_roles'], function (Blueprint $table) use ($tableNames) {
            $table->integer('id')->autoIncrement()->unique()->unsigned();
            $table->integer('role_id')->unsigned();
            $table->morphs('model');

            $table->foreign('role_id')
                ->references('id')
                ->on($tableNames['roles'])
                ->onDelete('cascade')
                ->onUpdate('cascade');

            $table->unique(['role_id', 'model_id', 'model_type'], $tableNames['model_has_roles'].'_unique_key');
        });

        Schema::create($tableNames['role_has_permissions'], function (Blueprint $table) use ($tableNames) {
            $table->integer('id')->autoIncrement()->unique()->unsigned();
            $table->integer('permission_id')->unsigned();
            $table->integer('section_id')->unsigned();
            $table->integer('role_id')->unsigned();
            $table->integer('container_id')->unsigned();

            $table->foreign('permission_id')
                ->references('id')
                ->on($tableNames['permissions'])
                ->onDelete('cascade')
                ->onUpdate('cascade');

            $table->foreign('role_id')
                ->references('id')
                ->on($tableNames['roles'])
                ->onDelete('cascade')
                ->onUpdate('cascade');

            $table->foreign('section_id')
                ->references('id')
                ->on($tableNames['sections'])
                ->onDelete('cascade')
                ->onUpdate('cascade');

            $table->foreign('container_id')
                ->references('id')
                ->on($tableNames['containers'])
                ->onDelete('cascade')
                ->onUpdate('cascade');

            $table->unique(['permission_id', 'role_id', 'section_id', 'container_id'], $tableNames['role_has_permissions'].'_unique_key');

            Artisan::call('cache:forget', ['key' => 'idsign.permission.cache.permissions']);
            Artisan::call('cache:forget', ['key' => 'idsign.permission.cache.sections']);
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        $tableNames = config('permission.table_names');

        Schema::dropIfExists($tableNames['role_has_permissions']);
        Schema::dropIfExists($tableNames['model_has_roles']);
        Schema::dropIfExists($tableNames['model_has_permissions']);
        Schema::dropIfExists($tableNames['roles']);
        Schema::dropIfExists($tableNames['sections']);
        Schema::dropIfExists($tableNames['permissions']);
        Schema::dropIfExists($tableNames['containers']);
    }
}
